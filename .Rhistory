asv_counts_df <- read.csv("data/metadata/asv_table_full.csv", row.names = 1, header = TRUE)
# Taxonomy table (features/ASVs as rows, taxonomic ranks as columns)
taxonomy_df <- read.csv("data/metadata/taxonomy_table_full.csv", row.names = 1, header = TRUE)
taxonomy_matrix <- as.matrix(taxonomy_df)
# Metadata table (samples as rows, metadata variables as columns)
metadata_df <- read.table("data/metadata/meta_full.tsv", sep = "\t", header = TRUE, row.names = 1, quote = "")
# --- 3. Initial Data Inspection (of raw loaded data) ---
cat("\nDimensions of raw ASV counts dataframe (samples x features):\n")
print(dim(asv_counts_df))
cat("\nHead of raw ASV counts dataframe (first 5 samples, first 5 features):\n")
print(head(asv_counts_df[, 1:min(5, ncol(asv_counts_df))]))
cat("\nDimensions of raw Taxonomy dataframe (features x ranks):\n")
print(dim(taxonomy_df))
cat("\nHead of raw Taxonomy dataframe:\n")
print(head(taxonomy_df))
cat("\nDimensions of Metadata dataframe (samples x variables):\n")
print(dim(metadata_df))
cat("\nHead of Metadata dataframe:\n")
print(head(metadata_df))
# --- 4. Prepare Data for Phyloseq - Including Feature Alignment FIX ---
# Convert to matrix for phyloseq's otu_table
# IMPORTANT: phyloseq's otu_table expects FEATURES as rows and SAMPLES as columns.
# Your asv_counts_df has SAMPLES as rows and FEATURES as columns, so we transpose it here.
asv_counts_matrix_phylo <- as.matrix(t(asv_counts_df))
# --- Data Integrity Checks & Mismatch FIX ---
# Find features present in ASV table but NOT in Taxonomy table
features_only_in_asv <- setdiff(rownames(asv_counts_matrix_phylo), rownames(taxonomy_df))
cat(paste("\nFeatures in ASV table but NOT in Taxonomy table (first 5):\n"))
print(head(features_only_in_asv, 5))
cat(paste("Total features only in ASV table: ", length(features_only_in_asv), "\n"))
# Find features present in Taxonomy table but NOT in ASV table
features_only_in_tax <- setdiff(rownames(taxonomy_df), rownames(asv_counts_matrix_phylo))
cat(paste("\nFeatures in Taxonomy table but NOT in ASV table (first 5):\n"))
print(head(features_only_in_tax, 5))
cat(paste("Total features only in Taxonomy table: ", length(features_only_in_tax), "\n"))
# Solution: Align Feature IDs by taking the intersection
# Identify features that are common to *both* the ASV table and the Taxonomy table
common_features <- intersect(rownames(asv_counts_matrix_phylo), rownames(taxonomy_df))
cat(paste("\nNumber of common features (after alignment): ", length(common_features), "\n"))
# Prune the ASV table to include only the common features
asv_counts_matrix_phylo_aligned <- asv_counts_matrix_phylo[common_features, , drop = FALSE]
# Prune the Taxonomy table to include only the common features
taxonomy_matrix_aligned <- taxonomy_matrix[common_features, , drop = FALSE]
cat("\nDimensions of ALIGNED ASV counts matrix:\n")
print(dim(asv_counts_matrix_phylo_aligned))
cat("\nDimensions of ALIGNED Taxonomy matrix:\n")
print(dim(taxonomy_matrix_aligned))
# Ensure sample IDs match between ALIGNED ASV table and Metadata table
if (!all(colnames(asv_counts_matrix_phylo_aligned) %in% rownames(metadata_df))) {
stop("Sample IDs in ALIGNED ASV table are missing in metadata. Please check matching IDs!")
}
if (!all(rownames(metadata_df) %in% colnames(asv_counts_matrix_phylo_aligned))) {
stop("Sample IDs in metadata are missing in ALIGNED ASV table. Please check matching IDs!")
}
# Create phyloseq components with ALIGNED data
OTU <- otu_table(asv_counts_matrix_phylo_aligned, taxa_are_rows = TRUE)
TAX <- tax_table(taxonomy_matrix_aligned)
SAM <- sample_data(metadata_df)
# --- 5. Load Phylogenetic Tree and Create complete phyloseq object ---
# The tree file is in Newick format
tree_phylo <- read.tree("data/processed/16S_processed/rooted_tree_newick/tree.nwk")
# Ensure tree has the same taxa names as your ALIGNED ASV table
# This aligns the features between your ASV table and your tree before adding to phyloseq.
phyloseq_obj_pre_merge_aligned <- phyloseq(OTU, TAX, SAM) # Create phyloseq obj without tree first
phyloseq_obj_pre_merge_aligned <- prune_taxa(taxa_names(phyloseq_obj_pre_merge_aligned) %in% tree_phylo$tip.label, phyloseq_obj_pre_merge_aligned)
# After the data loading (Section 2) in your script, and before any phyloseq object creation...
# Make sure these dataframes are loaded: asv_counts_df, taxonomy_df
# And these matrices derived: asv_counts_matrix_phylo, taxonomy_matrix
cat("\n--- Diagnosing Feature ID Mismatch ---\n")
cat("\nDimensions of initially loaded ASV counts dataframe (samples x features):\n")
print(dim(asv_counts_df))
cat("\nDimensions of initially loaded Taxonomy dataframe (features x ranks):\n")
print(dim(taxonomy_df))
# Transpose for phyloseq
asv_counts_matrix_phylo <- as.matrix(t(asv_counts_df))
cat("\nDimensions of ASV counts matrix (features x samples) BEFORE alignment:\n")
print(dim(asv_counts_matrix_phylo))
# Find features unique to ASV table
features_only_in_asv <- setdiff(rownames(asv_counts_matrix_phylo), rownames(taxonomy_df))
cat(paste("\nTotal features in ASV table but NOT in Taxonomy table: ", length(features_only_in_asv), "\n"))
cat(paste("First 10 features only in ASV table:\n"))
print(head(features_only_in_asv, 10))
# Find features unique to Taxonomy table
features_only_in_tax <- setdiff(rownames(taxonomy_df), rownames(asv_counts_matrix_phylo))
cat(paste("\nTotal features in Taxonomy table but NOT in ASV table: ", length(features_only_in_tax), "\n"))
cat(paste("First 10 features only in Taxonomy table:\n"))
print(head(features_only_in_tax, 10))
# Identify features that are common to *both* tables
common_features <- intersect(rownames(asv_counts_matrix_phylo), rownames(taxonomy_df))
cat(paste("\nNumber of common features (intersection): ", length(common_features), "\n"))
# --- Critical Check: If common_features is 0, this is the root cause. ---
# Dimensions after pruning (if common_features is empty, these will be 0)
asv_counts_matrix_phylo_aligned <- asv_counts_matrix_phylo[common_features, , drop = FALSE]
taxonomy_matrix_aligned <- taxonomy_matrix[common_features, , drop = FALSE]
cat("\nDimensions of ALIGNED ASV counts matrix:\n")
print(dim(asv_counts_matrix_phylo_aligned))
cat("\nDimensions of ALIGNED Taxonomy matrix:\n")
print(dim(taxonomy_matrix_aligned))
cat("\n--- End of Diagnosis ---\n")
# If common_features is 0, the next phyloseq object creation will still fail.
# We need to see the output of the above diagnosis.
# --- 1. Load Necessary Libraries ---
library(tidyverse) # For data manipulation (dplyr, tibble) and visualization (ggplot2)
library(phyloseq)  # For microbiome data objects and analysis
library(vegan)     # For ecological diversity metrics (often used by phyloseq)
library(ape)       # For reading phylogenetic tree files (Newick format)
# --- 2. Load Data Files ---
# ASV table (samples as rows, features/ASVs as columns)
asv_counts_df <- read.csv("data/metadata/asv_table_full.csv", row.names = 1, header = TRUE)
# --- FIX: Remove 'X' prefix from ASV IDs (row names) ---
# This is crucial because R prepends 'X' to IDs starting with numbers
rownames(asv_counts_df) <- sub("^X", "", rownames(asv_counts_df))
# --- END FIX ---
# Taxonomy table (features/ASVs as rows, taxonomic ranks as columns)
taxonomy_df <- read.csv("data/metadata/taxonomy_table_full.csv", row.names = 1, header = TRUE)
taxonomy_matrix <- as.matrix(taxonomy_df)
# Metadata table (samples as rows, metadata variables as columns)
metadata_df <- read.table("data/metadata/meta_full.tsv", sep = "\t", header = TRUE, row.names = 1, quote = "")
# --- 3. Initial Data Inspection (of raw loaded data) ---
cat("\nDimensions of raw ASV counts dataframe (samples x features):\n")
print(dim(asv_counts_df))
cat("\nHead of raw ASV counts dataframe (first 5 samples, first 5 features):\n")
print(head(asv_counts_df[, 1:min(5, ncol(asv_counts_df))]))
cat("\nDimensions of raw Taxonomy dataframe (features x ranks):\n")
print(dim(taxonomy_df))
cat("\nHead of raw Taxonomy dataframe:\n")
print(head(taxonomy_df))
cat("\nDimensions of Metadata dataframe (samples x variables):\n")
print(dim(metadata_df))
cat("\nHead of Metadata dataframe:\n")
print(head(metadata_df))
# --- 4. Prepare Data for Phyloseq - Including Feature Alignment FIX ---
# Convert to matrix for phyloseq's otu_table
# IMPORTANT: phyloseq's otu_table expects FEATURES as rows and SAMPLES as columns.
# Your asv_counts_df has SAMPLES as rows and FEATURES as columns, so we transpose it here.
asv_counts_matrix_phylo <- as.matrix(t(asv_counts_df))
# --- Data Integrity Checks & Mismatch FIX ---
# Find features present in ASV table but NOT in Taxonomy table (should be 0 now)
features_only_in_asv <- setdiff(rownames(asv_counts_matrix_phylo), rownames(taxonomy_df))
cat(paste("\nFeatures in ASV table but NOT in Taxonomy table: ", length(features_only_in_asv), "\n"))
# (No need to print head if we expect 0)
# Find features present in Taxonomy table but NOT in ASV table (should be 0 now)
features_only_in_tax <- setdiff(rownames(taxonomy_df), rownames(asv_counts_matrix_phylo))
cat(paste("\nFeatures in Taxonomy table but NOT in ASV table: ", length(features_only_in_tax), "\n"))
# (No need to print head if we expect 0)
# Solution: Align Feature IDs by taking the intersection
# This should now result in the full set of features from your data, as the X-prefix is gone.
common_features <- intersect(rownames(asv_counts_matrix_phylo), rownames(taxonomy_df))
cat(paste("\nNumber of common features (after alignment): ", length(common_features), "\n"))
# Prune the ASV table to include only the common features
asv_counts_matrix_phylo_aligned <- asv_counts_matrix_phylo[common_features, , drop = FALSE]
# Prune the Taxonomy table to include only the common features
taxonomy_matrix_aligned <- taxonomy_matrix[common_features, , drop = FALSE]
cat("\nDimensions of ALIGNED ASV counts matrix:\n")
print(dim(asv_counts_matrix_phylo_aligned))
cat("\nDimensions of ALIGNED Taxonomy matrix:\n")
print(dim(taxonomy_matrix_aligned))
# Ensure sample IDs match between ALIGNED ASV table and Metadata table
if (!all(colnames(asv_counts_matrix_phylo_aligned) %in% rownames(metadata_df))) {
stop("Sample IDs in ALIGNED ASV table are missing in metadata. Please check matching IDs!")
}
if (!all(rownames(metadata_df) %in% colnames(asv_counts_matrix_phylo_aligned))) {
stop("Sample IDs in metadata are missing in ALIGNED ASV table. Please check matching IDs!")
}
# Create phyloseq components with ALIGNED data
OTU <- otu_table(asv_counts_matrix_phylo_aligned, taxa_are_rows = TRUE)
TAX <- tax_table(taxonomy_matrix_aligned)
SAM <- sample_data(metadata_df)
# --- 5. Load Phylogenetic Tree and Create complete phyloseq object ---
# The tree file is in Newick format
tree_phylo <- read.tree("data/processed/16S_processed/rooted_tree_newick/tree.nwk")
# Ensure tree has the same taxa names as your ALIGNED ASV table
# This aligns the features between your ASV table and your tree before adding to phyloseq.
# It's important to prune the tree to only the features present in your ASV table
phyloseq_obj_pre_merge_aligned <- phyloseq(OTU, TAX, SAM)
phyloseq_obj_pre_merge_aligned <- prune_taxa(taxa_names(phyloseq_obj_pre_merge_aligned) %in% tree_phylo$tip.label, phyloseq_obj_pre_merge_aligned)
# (Continuing from where the script stopped or from the beginning, but ensure data is loaded)
# --- After asv_counts_df is loaded and X-prefix is removed ---
# rownames(asv_counts_df) <- sub("^X", "", rownames(asv_counts_df))
cat("\n--- Detailed Diagnosis of Feature ID Mismatch ---\n")
cat("\nFirst 10 ASV IDs from asv_counts_df (after X-prefix removal):\n")
print(head(rownames(asv_counts_df), 10))
cat("\nFirst 10 ASV IDs from taxonomy_df:\n")
print(head(rownames(taxonomy_df), 10))
# --- Check for differences ---
features_only_in_asv <- setdiff(rownames(asv_counts_df), rownames(taxonomy_df))
cat(paste("\nTotal features in ASV table but NOT in Taxonomy table: ", length(features_only_in_asv), "\n"))
cat(paste("First 10 features only in ASV table:\n"))
print(head(features_only_in_asv, 10))
features_only_in_tax <- setdiff(rownames(taxonomy_df), rownames(asv_counts_df))
cat(paste("\nTotal features in Taxonomy table but NOT in ASV table: ", length(features_only_in_tax), "\n"))
cat(paste("First 10 features only in Taxonomy table:\n"))
print(head(features_only_in_tax, 10))
# --- Check common features ---
common_features <- intersect(rownames(asv_counts_df), rownames(taxonomy_df))
cat(paste("\nNumber of common features (intersection): ", length(common_features), "\n"))
cat("\n--- End of Detailed Diagnosis ---\n")
# Based on this output, we will determine the next step.
# If common_features is still 0, it indicates a fundamental mismatch in the author-provided files.
# --- 1. Load Necessary Libraries ---
library(tidyverse) # For data manipulation (dplyr, tibble) and visualization (ggplot2)
library(phyloseq)  # For microbiome data objects and analysis
library(vegan)     # For ecological diversity metrics (often used by phyloseq)
library(ape)       # For reading phylogenetic tree files (Newick format)
# --- 2. Load Data Files ---
# ASV table (samples as rows, features/ASVs as columns)
asv_counts_df <- read.csv("data/metadata/asv_table_full.csv", row.names = 1, header = TRUE)
# --- FIX: Remove 'X' prefix from ASV IDs (COLUMN names) ---
# This is crucial because R prepends 'X' to column names that start with numbers.
# These column names are your ASV IDs (features).
colnames(asv_counts_df) <- sub("^X", "", colnames(asv_counts_df))
# --- END FIX ---
# Taxonomy table (features/ASVs as rows, taxonomic ranks as columns)
taxonomy_df <- read.csv("data/metadata/taxonomy_table_full.csv", row.names = 1, header = TRUE)
taxonomy_matrix <- as.matrix(taxonomy_df)
# Metadata table (samples as rows, metadata variables as columns)
metadata_df <- read.table("data/metadata/meta_full.tsv", sep = "\t", header = TRUE, row.names = 1, quote = "")
# --- 3. Initial Data Inspection (of raw loaded data) ---
cat("\nDimensions of raw ASV counts dataframe (samples x features):\n")
print(dim(asv_counts_df))
cat("\nHead of raw ASV counts dataframe (first 5 samples, first 5 features):\n")
print(head(asv_counts_df[, 1:min(5, ncol(asv_counts_df))]))
cat("\nDimensions of raw Taxonomy dataframe (features x ranks):\n")
print(dim(taxonomy_df))
cat("\nHead of raw Taxonomy dataframe:\n")
print(head(taxonomy_df))
cat("\nDimensions of Metadata dataframe (samples x variables):\n")
print(dim(metadata_df))
cat("\nHead of Metadata dataframe:\n")
print(head(metadata_df))
# --- 4. Prepare Data for Phyloseq - Including Feature Alignment FIX ---
# Convert to matrix for phyloseq's otu_table
# IMPORTANT: phyloseq's otu_table expects FEATURES as rows and SAMPLES as columns.
# Your asv_counts_df has SAMPLES as rows and FEATURES as columns, so we transpose it here.
asv_counts_matrix_phylo <- as.matrix(t(asv_counts_df))
# --- Data Integrity Checks & Mismatch FIX (should now result in matching IDs) ---
# Find features present in ASV table but NOT in Taxonomy table (should be 0 now)
features_only_in_asv <- setdiff(rownames(asv_counts_matrix_phylo), rownames(taxonomy_df))
cat(paste("\nFeatures in ASV table but NOT in Taxonomy table (should be 0): ", length(features_only_in_asv), "\n"))
# Find features present in Taxonomy table but NOT in ASV table (should be 0 now)
features_only_in_tax <- setdiff(rownames(taxonomy_df), rownames(asv_counts_matrix_phylo))
cat(paste("\nFeatures in Taxonomy table but NOT in ASV table (should be 0): ", length(features_only_in_tax), "\n"))
# Solution: Align Feature IDs by taking the intersection
# This should now result in the full set of features from your data, as the X-prefix is gone.
common_features <- intersect(rownames(asv_counts_matrix_phylo), rownames(taxonomy_df))
cat(paste("\nNumber of common features (after alignment): ", length(common_features), "\n"))
# Prune the ASV table to include only the common features
asv_counts_matrix_phylo_aligned <- asv_counts_matrix_phylo[common_features, , drop = FALSE]
# Prune the Taxonomy table to include only the common features
taxonomy_matrix_aligned <- taxonomy_matrix[common_features, , drop = FALSE]
cat("\nDimensions of ALIGNED ASV counts matrix:\n")
print(dim(asv_counts_matrix_phylo_aligned))
cat("\nDimensions of ALIGNED Taxonomy matrix:\n")
print(dim(taxonomy_matrix_aligned))
# Ensure sample IDs match between ALIGNED ASV table and Metadata table
if (!all(colnames(asv_counts_matrix_phylo_aligned) %in% rownames(metadata_df))) {
stop("Sample IDs in ALIGNED ASV table are missing in metadata. Please check matching IDs!")
}
if (!all(rownames(metadata_df) %in% colnames(asv_counts_matrix_phylo_aligned))) {
stop("Sample IDs in metadata are missing in ALIGNED ASV table. Please check matching IDs!")
}
# Create phyloseq components with ALIGNED data
OTU <- otu_table(asv_counts_matrix_phylo_aligned, taxa_are_rows = TRUE)
TAX <- tax_table(taxonomy_matrix_aligned)
SAM <- sample_data(metadata_df)
# --- 5. Load Phylogenetic Tree and Create complete phyloseq object ---
# The tree file is in Newick format
tree_phylo <- read.tree("data/processed/16S_processed/rooted_tree_newick/tree.nwk")
# Ensure tree has the same taxa names as your ALIGNED ASV table
# This aligns the features between your ASV table and your tree before adding to phyloseq.
# It's important to prune the tree to only the features present in your ASV table
phyloseq_obj_pre_merge_aligned <- phyloseq(OTU, TAX, SAM)
phyloseq_obj_pre_merge_aligned <- prune_taxa(taxa_names(phyloseq_obj_pre_merge_aligned) %in% tree_phylo$tip.label, phyloseq_obj_pre_merge_aligned)
# (Continuing from where the script stopped or from the beginning, but ensure data is loaded)
# --- After asv_counts_df is loaded and X-prefix is removed ---
# rownames(asv_counts_df) <- sub("^X", "", rownames(asv_counts_df))
cat("\n--- Detailed Diagnosis of Feature ID Mismatch ---\n")
cat("\nFirst 10 ASV IDs from asv_counts_df (after X-prefix removal):\n")
print(head(rownames(asv_counts_df), 10))
cat("\nFirst 10 ASV IDs from taxonomy_df:\n")
print(head(rownames(taxonomy_df), 10))
# --- Check for differences ---
features_only_in_asv <- setdiff(rownames(asv_counts_df), rownames(taxonomy_df))
cat(paste("\nTotal features in ASV table but NOT in Taxonomy table: ", length(features_only_in_asv), "\n"))
cat(paste("First 10 features only in ASV table:\n"))
print(head(features_only_in_asv, 10))
features_only_in_tax <- setdiff(rownames(taxonomy_df), rownames(asv_counts_df))
cat(paste("\nTotal features in Taxonomy table but NOT in ASV table: ", length(features_only_in_tax), "\n"))
cat(paste("First 10 features only in Taxonomy table:\n"))
print(head(features_only_in_tax, 10))
# --- Check common features ---
common_features <- intersect(rownames(asv_counts_df), rownames(taxonomy_df))
cat(paste("\nNumber of common features (intersection): ", length(common_features), "\n"))
cat("\n--- End of Detailed Diagnosis ---\n")
# Based on this output, we will determine the next step.
# If common_features is still 0, it indicates a fundamental mismatch in the author-provided files.
# --- 1. Load Necessary Libraries ---
library(tidyverse) # For data manipulation (dplyr, tibble) and visualization (ggplot2)
library(phyloseq)  # For microbiome data objects and analysis
library(vegan)     # For ecological diversity metrics (often used by phyloseq)
library(ape)       # For reading phylogenetic tree files (Newick format)
# --- 2. Load Data Files ---
# ASV table (samples as rows, features/ASVs as columns)
asv_counts_df <- read.csv("data/metadata/asv_table_full.csv", row.names = 1, header = TRUE)
# --- FIX: Remove 'X' prefix from ASV IDs (COLUMN names of asv_counts_df) ---
# This is crucial because R prepends 'X' to column names that start with numbers.
# These column names are your ASV IDs (features) that need to match taxonomy_df's row names.
colnames(asv_counts_df) <- sub("^X", "", colnames(asv_counts_df))
# --- END FIX ---
# Taxonomy table (features/ASVs as rows, taxonomic ranks as columns)
taxonomy_df <- read.csv("data/metadata/taxonomy_table_full.csv", row.names = 1, header = TRUE)
taxonomy_matrix <- as.matrix(taxonomy_df)
# Metadata table (samples as rows, metadata variables as columns)
metadata_df <- read.table("data/metadata/meta_full.tsv", sep = "\t", header = TRUE, row.names = 1, quote = "")
# --- 3. Initial Data Inspection (of raw loaded data) ---
cat("\nDimensions of raw ASV counts dataframe (samples x features):\n")
print(dim(asv_counts_df))
cat("\nHead of raw ASV counts dataframe (first 5 samples, first 5 features):\n")
print(head(asv_counts_df[, 1:min(5, ncol(asv_counts_df))]))
cat("\nDimensions of raw Taxonomy dataframe (features x ranks):\n")
print(dim(taxonomy_df))
cat("\nHead of raw Taxonomy dataframe:\n")
print(head(taxonomy_df))
cat("\nDimensions of Metadata dataframe (samples x variables):\n")
print(dim(metadata_df))
cat("\nHead of Metadata dataframe:\n")
print(head(metadata_df))
# --- 4. Prepare Data for Phyloseq - Including Feature Alignment FIX ---
# Convert to matrix for phyloseq's otu_table
# IMPORTANT: phyloseq's otu_table expects FEATURES as rows and SAMPLES as columns.
# Your asv_counts_df has SAMPLES as rows and FEATURES as columns, so we transpose it here.
asv_counts_matrix_phylo <- as.matrix(t(asv_counts_df))
# --- Data Integrity Checks & Mismatch FIX (should now result in matching IDs) ---
# Find features present in ASV table but NOT in Taxonomy table (should be 0 now)
features_only_in_asv <- setdiff(rownames(asv_counts_matrix_phylo), rownames(taxonomy_df))
cat(paste("\nFeatures in ASV table but NOT in Taxonomy table (should be 0): ", length(features_only_in_asv), "\n"))
# Find features present in Taxonomy table but NOT in ASV table (should be 0 now)
features_only_in_tax <- setdiff(rownames(taxonomy_df), rownames(asv_counts_matrix_phylo))
cat(paste("\nFeatures in Taxonomy table but NOT in ASV table (should be 0): ", length(features_only_in_tax), "\n"))
# Solution: Align Feature IDs by taking the intersection
# This should now result in the full set of features from your data, as the X-prefix is gone.
common_features <- intersect(rownames(asv_counts_matrix_phylo), rownames(taxonomy_df))
cat(paste("\nNumber of common features (after alignment): ", length(common_features), "\n"))
# Prune the ASV table to include only the common features
asv_counts_matrix_phylo_aligned <- asv_counts_matrix_phylo[common_features, , drop = FALSE]
# Prune the Taxonomy table to include only the common features
taxonomy_matrix_aligned <- taxonomy_matrix[common_features, , drop = FALSE]
cat("\nDimensions of ALIGNED ASV counts matrix:\n")
print(dim(asv_counts_matrix_phylo_aligned))
cat("\nDimensions of ALIGNED Taxonomy matrix:\n")
print(dim(taxonomy_matrix_aligned))
# Ensure sample IDs match between ALIGNED ASV table and Metadata table
if (!all(colnames(asv_counts_matrix_phylo_aligned) %in% rownames(metadata_df))) {
stop("Sample IDs in ALIGNED ASV table are missing in metadata. Please check matching IDs!")
}
if (!all(rownames(metadata_df) %in% colnames(asv_counts_matrix_phylo_aligned))) {
stop("Sample IDs in metadata are missing in ALIGNED ASV table. Please check matching IDs!")
}
# Create phyloseq components with ALIGNED data
OTU <- otu_table(asv_counts_matrix_phylo_aligned, taxa_are_rows = TRUE)
TAX <- tax_table(taxonomy_matrix_aligned)
SAM <- sample_data(metadata_df)
# --- 5. Load Phylogenetic Tree and Create complete phyloseq object ---
# The tree file is in Newick format
tree_phylo <- read.tree("data/processed/16S_processed/rooted_tree_newick/tree.nwk")
# Ensure tree has the same taxa names as your ALIGNED ASV table
# This aligns the features between your ASV table and your tree before adding to phyloseq.
# It's important to prune the tree to only the features present in your ASV table
phyloseq_obj_pre_merge_aligned <- phyloseq(OTU, TAX, SAM)
phyloseq_obj_pre_merge_aligned <- prune_taxa(taxa_names(phyloseq_obj_pre_merge_aligned) %in% tree_phylo$tip.label, phyloseq_obj_pre_merge_aligned)
# --- 1. Load Necessary Libraries ---
library(tidyverse) # For data manipulation (dplyr, tibble) and visualization (ggplot2)
library(phyloseq)  # For microbiome data objects and analysis
library(vegan)     # For ecological diversity metrics
library(ape)       # For reading phylogenetic tree files (if available for UniFrac)
# --- 2. Load Data Files ---
# ASV table (samples as rows, features/ASVs as columns)
asv_counts_df <- read.csv("data/metadata/asv_table_full.csv", row.names = 1, header = TRUE)
# --- FIX: Remove 'X' prefix from ASV IDs (COLUMN names) if they are hashed IDs ---
# This assumes your ASV IDs in the columns are hashes that start with numbers.
# Check if any column names start with 'X' and remove it.
if (any(startsWith(colnames(asv_counts_df), "X"))) {
colnames(asv_counts_df) <- sub("^X", "", colnames(asv_counts_df))
}
# --- END FIX ---
# Taxonomy table (features/ASVs as rows, taxonomic ranks as columns)
# Load for potential future use or specific taxon lookup, but NOT for direct phyloseq integration due to ID mismatch
taxonomy_df_raw <- read.csv("data/metadata/taxonomy_table_full.csv", row.names = 1, header = TRUE)
# --- FIX: Remove 'X' prefix from taxonomy_df row names if they exist ---
if (any(startsWith(rownames(taxonomy_df_raw), "X"))) {
rownames(taxonomy_df_raw) <- sub("^X", "", rownames(taxonomy_df_raw))
}
# --- END FIX ---
taxonomy_matrix_raw <- as.matrix(taxonomy_df_raw) # Keep a raw matrix version
# Metadata table (samples as rows, metadata variables as columns)
metadata_df <- read.table("data/metadata/meta_full.tsv", sep = "\t", header = TRUE, row.names = 1, quote = "")
# --- 3. Initial Data Inspection ---
cat("\nDimensions of ASV counts dataframe (samples x features):\n")
print(dim(asv_counts_df))
cat("\nHead of ASV counts dataframe (first 5 samples, first 5 features):\n")
print(head(asv_counts_df[, 1:min(5, ncol(asv_counts_df))]))
cat("\nDimensions of Taxonomy dataframe (features x ranks):\n")
print(dim(taxonomy_df_raw))
cat("\nHead of Taxonomy dataframe:\n")
print(head(taxonomy_df_raw))
cat("\nDimensions of Metadata dataframe (samples x variables):\n")
print(dim(metadata_df))
cat("\nHead of Metadata dataframe:\n")
print(head(metadata_df))
# --- 4. Prepare ASV Table and Metadata for Phyloseq ---
# Convert ASV counts to matrix and transpose for phyloseq: features (ASVs) as rows, samples as columns
asv_counts_matrix_phylo <- as.matrix(t(asv_counts_df))
# Ensure sample IDs match between ASV table and Metadata table (CRITICAL CHECK)
if (!all(colnames(asv_counts_matrix_phylo) %in% rownames(metadata_df))) {
stop("Sample IDs in ASV table are missing in metadata. Please check matching IDs!")
}
if (!all(rownames(metadata_df) %in% colnames(asv_counts_matrix_phylo))) {
stop("Sample IDs in metadata are missing in ASV table. Please check matching IDs!")
}
# Create basic phyloseq object with only OTU table and Sample Data
# We omit taxonomy for now due to the ID mismatch with taxonomy_df_raw
OTU <- otu_table(asv_counts_matrix_phylo, taxa_are_rows = TRUE)
SAM <- sample_data(metadata_df)
phyloseq_obj_basic <- phyloseq(OTU, SAM)
cat("\nPhyloseq object (basic - without taxonomy table) created successfully!\n")
print(phyloseq_obj_basic)
# --- 5. Data Normalization (Rarefaction) ---
cat("\nChecking sample sequencing depths before rarefaction:\n")
sample_sums_before_rarefaction <- sample_sums(phyloseq_obj_basic)
print(summary(sample_sums_before_rarefaction))
min_depth <- min(sample_sums_before_rarefaction)
cat(paste("\nMinimum sequence count per sample before rarefaction: ", min_depth, "\n"))
# Use a safe rarefaction depth, e.g., 80% of your min_depth or 3500 if min_depth allows
rarefaction_depth <- floor(min_depth * 0.8) # Keep 80% of reads from smallest sample
if (rarefaction_depth == 0) {
rarefaction_depth <- 1 # Ensure minimum is at least 1
}
cat(paste("\nRarefying to depth: ", rarefaction_depth, "\n"))
phyloseq_rarefied_basic <- prune_samples(sample_sums(phyloseq_obj_basic) >= rarefaction_depth, phyloseq_obj_basic)
phyloseq_rarefied_basic <- rarefy_even_depth(phyloseq_rarefied_basic, sample.size = rarefaction_depth, rngseed = 123, replace = FALSE)
cat("\nPhyloseq object after rarefaction (basic):\n")
print(phyloseq_rarefied_basic)
# --- 6. Alpha Diversity Analysis (Shannon only, as Faith_PD needs tree & matched taxa) ---
alpha_diversity_shannon <- estimate_richness(phyloseq_rarefied_basic, measures = c("Shannon"))
cat("\nAlpha Diversity (Shannon) results:\n")
print(head(alpha_diversity_shannon))
# Merge alpha diversity with metadata for plotting
alpha_diversity_df <- data.frame(sample_data(phyloseq_rarefied_basic), alpha_diversity_shannon)
# Plot Shannon diversity by Diet
p_alpha_shannon <- ggplot(alpha_diversity_df, aes(x = Diet, y = Shannon, fill = Diet)) +
geom_boxplot() +
geom_point(position = position_jitter(width = 0.2), alpha = 0.6) +
theme_bw() +
labs(title = "Alpha Diversity (Shannon) by Diet", y = "Shannon Diversity Index") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p_alpha_shannon)
cat("\nAlpha diversity plot (Shannon) generated.\n")
# --- 7. Beta Diversity Analysis (Jaccard only, as UniFrac needs tree & matched taxa) ---
# Calculate Jaccard distance (non-phylogenetic)
dist_jaccard <- distance(phyloseq_rarefied_basic, method = "jaccard", binary = FALSE)
cat("\nJaccard Distance Matrix created.\n")
# Perform PCoA (Principal Coordinates Analysis)
pcoa_jaccard <- ordinate(phyloseq_rarefied_basic, method = "PCoA", distance = dist_jaccard)
# Plot PCoA colored by Diet
p_beta_jaccard <- plot_ordination(phyloseq_rarefied_basic, pcoa_jaccard, color = "Diet") +
geom_point(size = 3, alpha = 0.7) +
theme_bw() +
labs(title = "Beta Diversity (Jaccard) PCoA by Diet") +
stat_ellipse(type = "norm", aes(color = Diet))
print(p_beta_jaccard)
cat("\nBeta diversity PCoA plot (Jaccard) generated.\n")
# --- 8. Basic Taxonomic Composition (without full phyloseq integration) ---
# To visualize taxonomy, we'll try to find common features with the taxonomy table.
# We will aggregate counts by common features that we can classify.
# Identify common features between ASV table columns and Taxonomy table rows
features_in_asv_cols_and_tax_rows <- intersect(colnames(asv_counts_df), rownames(taxonomy_df_raw))
if (length(features_in_asv_cols_and_tax_rows) > 0) {
cat("\nAttempting basic taxonomic composition visualization for common features.\n")
# Prune ASV table to common features
asv_counts_common_features <- asv_counts_df[, features_in_asv_cols_and_tax_rows, drop = FALSE]
# Prune taxonomy table to common features
taxonomy_common_features <- taxonomy_df_raw[features_in_asv_cols_and_tax_rows, , drop = FALSE]
# Create a temporary phyloseq object with only common features for barplot
temp_otu <- otu_table(as.matrix(t(asv_counts_common_features)), taxa_are_rows = TRUE)
temp_tax <- tax_table(as.matrix(taxonomy_common_features))
temp_sam <- sample_data(metadata_df)
phyloseq_obj_common_features <- phyloseq(temp_otu, temp_tax, temp_sam)
# Aggregate to Phylum level for bar plot
phyloseq_phylum <- tax_glom(phyloseq_obj_common_features, taxrank = "Phylum")
# Transform to relative abundance
phyloseq_phylum_relabund <- transform_sample_counts(phyloseq_phylum, function(x) x / sum(x))
# Plot Phylum level bar plot
p_phylum_barplot <- plot_bar(phyloseq_phylum_relabund, fill = "Phylum", x = "Diet") +
geom_bar(aes(color = Phylum, fill = Phylum), stat = "identity", position = "stack") +
labs(x = "", y = "Relative Abundance") +
facet_wrap(~ Diet, scales = "free_x") + # Separate plots for each Diet
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p_phylum_barplot)
cat("\nPhylum level bar plot generated for common features.\n")
} else {
cat("\nNo common features found between ASV table and Taxonomy table for bar plot.\n")
cat("Skipping taxonomic composition visualization.\n")
}
cat("\n16S Amplicon analysis complete (with data limitations noted). Ready for saving results!\n")
# --- Save Results (Optional) ---
ggsave("results/16S_results/figures/alpha_diversity_shannon.png", p_alpha_shannon)
ggsave("results/16S_results/figures/beta_diversity_jaccard.png", p_beta_jaccard)
ggsave("results/16S_results/figures/phylum_barplot.png", p_phylum_barplot)
saveRDS(phyloseq_obj_basic, "data/processed/16S_processed/phyloseq_object_basic.rds")
saveRDS(phyloseq_rarefied_basic, "data/processed/16S_processed/phyloseq_object_rarefied_basic.rds")
saveRDS(phyloseq_obj_common_features, "data/processed/16S_processed/phyloseq_object_common_features_for_taxa.rds")
